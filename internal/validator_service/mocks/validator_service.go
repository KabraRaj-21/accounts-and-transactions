// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	validator "transaction/internal/validator_service/types/validator"

	validator_service "transaction/internal/transaction/types/validator_service"
)

// ValidatorService is an autogenerated mock type for the ValidatorService type
type ValidatorService struct {
	mock.Mock
}

// PerformValidation provides a mock function with given fields: ctx, req
func (_m *ValidatorService) PerformValidation(ctx context.Context, req *validator_service.ValidationRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PerformValidation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *validator_service.ValidationRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterValidator provides a mock function with given fields: actionType, _a1
func (_m *ValidatorService) RegisterValidator(actionType validator_service.ActionType, _a1 validator.Validator) error {
	ret := _m.Called(actionType, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(validator_service.ActionType, validator.Validator) error); ok {
		r0 = rf(actionType, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewValidatorService creates a new instance of ValidatorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidatorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValidatorService {
	mock := &ValidatorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
